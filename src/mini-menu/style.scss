@import '../helpers/style';

@mixin miniMenuColor($color) {

    &.MiniMenu--#{$color} {
        color: color($color, 500);

        .MiniMenu-icon .Icon {
            fill: color($color, 500);
        }

        .MiniMenu-optionButton {

            &:hover {
                color: color($color, 900);
            }

            &:before {
                background: color($color, 100);
            }
        }
    }
}

@mixin miniMenuisActive {
    opacity: 1;
    pointer-events: auto;
    transform: translateY(0);
    z-index: zIndex(100);
}

@mixin miniMenuIsClosed {
    opacity: 0;
    pointer-events: none;
    transform: translateY(space(300));
    z-index: 0;
}

@keyframes miniMenuIsMounted {

    0% {
        opacity: 0;
    }
    50% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

@keyframes miniMenuisActive {

    0% {
        @include miniMenuIsClosed;
    }
    100% {
        @include miniMenuisActive;
    }
}

@keyframes miniMenuIsClosed {

    0% {
        @include miniMenuisActive;
    }
    99% {
        opacity: 0;
        pointer-events: auto;
        transform: translateY(space(300));
        z-index: zIndex(100);
    }
    100% {
        @include miniMenuIsClosed;
    }
}

.MiniMenu {
    animation: {
        duration: speed(300) * 2;
        fill-mode: forwards;
        name: miniMenuIsMounted;
    }
    position: relative;

    @each $color in $G-allColors {
        @include miniMenuColor($color);
    }

    &.isActive .MiniMenu-options {
        animation: {
            duration: speed(300);
            fill-mode: forwards;
            name: miniMenuisActive;
        }
   }

   &:not(.isActive) .MiniMenu-options {
       animation: {
           duration: speed(300);
           fill-mode: forwards;
           name: miniMenuIsClosed;
       }
   }

   &.isActive .MiniMenu-toggle {
       pointer-events: none;
   }

    &-toggle {
        $size: space(600);
        @include anchorReset;
        display: block;
        height: $size;
        opacity: 0.5;
        position: relative;
        transition: opacity speed(300);
        width: $size;

        // &:focus,
        // &.isActive,
        // &:hover {
        //     opacity: 1;
        // }

        // &:focus {
        //     pointer-events: none;
        //
        // //     + .MiniMenu-options {
        // //         animation: {
        // //             duration: speed(300);
        // //             fill-mode: forwards;
        // //             name: miniMenuisActive;
        // //         }
        // //    }
        // }

        // &:not(:focus) + .MiniMenu-options {
        //     animation: {
        //         duration: speed(300);
        //         fill-mode: forwards;
        //         name: miniMenuIsClosed;
        //     }
        // }
    }

    &-icon {
        $size: 2.1rem;
        display: block;
        height: $size;
        left: 50%;
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
        width: $size;
    }

    &-options {
        @include paperDepth;
        @include miniMenuIsClosed;
        background: white;
        list-style: none;
        overflow: hidden;
        padding: 0;
        position: absolute;
        right: 0;
        top: 100%;
    }

    &-option {
        padding: 0;

        &:nth-of-type(1n+2) .MiniMenu-optionButton:before {
            content: '';
            display: block;
            height: 1px;
            left: space(500);
            position: absolute;
            right: space(500);
            top: 0;
        }

        &:first-of-type .MiniMenu-optionButton {
            padding-top: space(500);
        }

        &:last-of-type .MiniMenu-optionButton {
            padding-bottom: space(500);
        }
    }

    &-optionButton {
        @include buttonReset;
        padding: space(300) space(500);
        position: relative;
        text-align: left;
        transition: color speed(300);
        width: 100%;
    }
}
